generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  role            UserRole          @default(VIEWER)
  avatar_url      String?
  created_at      DateTime          @default(now())
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  checklist_items checklist_items[]
  expenses        expenses[]
  itinerary_items itinerary_items[]
  places          places[]
  reservations    reservations[]
  trip_members    trip_members[]
  trips           trips[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model trips {
  id                   String            @id @default(cuid())
  title                String
  start_date           DateTime
  end_date             DateTime
  created_by           String
  created_at           DateTime          @default(now())
  home_currency        String            @default("USD")
  budget_accommodation Float?
  budget_activities    Float?
  budget_food          Float?
  budget_misc          Float?
  budget_shopping      Float?
  budget_total         Float?
  budget_transport     Float?
  activities           activities[]
  checklist_items      checklist_items[]
  days                 days[]
  expenses             expenses[]
  itinerary_items      itinerary_items[]
  locations            locations[]
  places               places[]
  reservations         reservations[]
  trip_members         trip_members[]
  users                User              @relation(fields: [created_by], references: [id])
}

model itinerary_items {
  id                 String            @id @default(cuid())
  trip_id            String            @map("trip_id")
  title              String
  description        String?
  start_time         DateTime?         @map("start_time")
  end_time           DateTime?         @map("end_time")
  type               ItineraryItemType
  created_at         DateTime          @default(now()) @map("created_at")
  created_by_user_id String            @map("created_by_user_id")
  day_id             String            @map("day_id")
  note               String?
  place_id           String?           @map("place_id")
  status             ItemStatus        @default(PLANNED)
  sort_order         Int?
  created_by_user    User              @relation(fields: [created_by_user_id], references: [id])
  day                days              @relation(fields: [day_id], references: [id], onDelete: Cascade)
  place              places?           @relation(fields: [place_id], references: [id])
  trip               trips             @relation(fields: [trip_id], references: [id])

  @@index([day_id, start_time])
  @@map("itinerary_items")
}

model days {
  id              String            @id @default(cuid())
  trip_id         String            @map("trip_id")
  date            DateTime          @db.Date
  note            String?
  trip            trips             @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  expenses        expenses[]
  itinerary_items itinerary_items[]
  weather_cache   weather_cache?

  @@unique([trip_id, date])
}

model places {
  id                 String            @id @default(cuid())
  trip_id            String
  name               String
  address            String?
  lat                Float?
  lng                Float?
  source_url         String?
  category           String?
  created_by_user_id String
  created_at         DateTime          @default(now())
  itinerary_items    itinerary_items[]
  created_by_user    User              @relation(fields: [created_by_user_id], references: [id])
  trip               trips             @relation(fields: [trip_id], references: [id], onDelete: Cascade)
}

model expenses {
  id                 String           @id @default(cuid())
  trip_id            String
  category           ExpenseCategory?
  date               DateTime
  created_at         DateTime         @default(now())
  amount_jpy         Float
  amount_original    Float
  created_by_user_id String
  currency_original  String
  fx_rate            Float
  label              String
  day_id             String?
  expense_type       ExpenseType      @default(ACTUAL)
  created_by_user    User             @relation(fields: [created_by_user_id], references: [id])
  day                days?            @relation(fields: [day_id], references: [id])
  trip               trips            @relation(fields: [trip_id], references: [id], onDelete: Cascade)

  @@index([trip_id, date])
}

model trip_members {
  id      String         @id @default(cuid())
  trip_id String
  user_id String
  role    TripMemberRole @default(VIEWER)
  trip    trips          @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([trip_id, user_id])
}

model weather_cache {
  id      String   @id @default(cuid())
  day_id  String   @unique
  weather Json
  fetched DateTime @default(now())
  day     days     @relation(fields: [day_id], references: [id], onDelete: Cascade)
}

model checklist_items {
  id           String            @id @default(cuid())
  trip_id      String
  user_id      String
  title        String
  completed    Boolean           @default(false)
  category     ChecklistCategory @default(GENERAL)
  created_at   DateTime          @default(now())
  completed_at DateTime?
  due_date     DateTime?
  priority     Priority          @default(MEDIUM)
  trip         trips             @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [user_id], references: [id])
}

model activities {
  id          String     @id @default(cuid())
  trip_id     String
  description String?
  location_id String?
  created_at  DateTime   @default(now())
  image_url   String?
  name        String
  price_level Int?
  rating      Float?
  url         String?
  location    locations? @relation(fields: [location_id], references: [id])
  trip        trips      @relation(fields: [trip_id], references: [id], onDelete: Cascade)
}

model locations {
  id           String         @id @default(cuid())
  name         String
  address      String?
  lat          Float
  lng          Float
  pin_type     PinType        @default(CUSTOM)
  trip_id      String
  created_at   DateTime       @default(now())
  activities   activities[]
  trip         trips          @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  reservations reservations[]
}

model reservations {
  id           String          @id @default(cuid())
  trip_id      String
  type         ReservationType
  location_id  String?
  notes        String?
  created_by   String
  created_at   DateTime        @default(now())
  confirmation String?
  date         DateTime
  name         String
  party_size   Int?
  time         String?
  user         User            @relation(fields: [created_by], references: [id])
  location     locations?      @relation(fields: [location_id], references: [id])
  trip         trips           @relation(fields: [trip_id], references: [id], onDelete: Cascade)
}

enum ItemStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ChecklistCategory {
  DOCUMENTS
  PACKING
  BOOKING
  PREPARATION
  GENERAL
}

enum ExpenseCategory {
  TRANSPORT
  ACCOMMODATION
  FOOD
  ACTIVITIES
  SHOPPING
  MISC
  OTHER
}

enum ExpenseType {
  PLANNED
  ACTUAL
}

enum ItineraryItemType {
  ACTIVITY
  TRANSPORT
  MEAL
  ACCOMMODATION
  MEETING
  FREE_TIME
}

enum PinType {
  RESTAURANT
  ATTRACTION
  HOTEL
  TRANSPORT
  SHOPPING
  CUSTOM
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReservationType {
  RESTAURANT
  HOTEL
  ACTIVITY
  TRANSPORT
  OTHER
}

enum TripMemberRole {
  OWNER
  EDITOR
  VIEWER
}

enum TripPermission {
  READ
  WRITE
  DELETE
  ADMIN
}

enum UserRole {
  SUPER_USER
  COLLABORATOR
  VIEWER
}
