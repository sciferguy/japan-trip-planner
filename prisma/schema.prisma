generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  name            String?
  role            UserRole          @default(VIEWER)
  avatar_url      String?
  created_at      DateTime          @default(now())
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  checklist_items checklist_items[]
  expenses        expenses[]
  itinerary_items itinerary_items[]
  reservations    reservations[]
  trip_members    trip_members[]
  trips           trips[]
  places          places[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model trips {
  id              String            @id @default(cuid())
  title           String
  start_date      DateTime
  end_date        DateTime
  created_by      String
  created_at      DateTime          @default(now())
  activities      activities[]
  checklist_items checklist_items[]
  expenses        expenses[]
  itinerary_items itinerary_items[]
  locations       locations[]
  reservations    reservations[]
  trip_members    trip_members[]
  users           User              @relation(fields: [created_by], references: [id])
  days            days[]
  places          places[]
}

model days {
  id              String            @id @default(cuid())
  trip_id         String
  date            DateTime          @db.Date
  note            String?
  trip            trips             @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  itinerary_items itinerary_items[]
  weather_cache   weather_cache?

  @@unique([trip_id, date])
}

model places {
  id                 String            @id @default(cuid())
  trip_id            String
  name               String
  address            String?
  lat                Float?
  lng                Float?
  source_url         String?
  category           String?
  created_by_user_id String
  created_at         DateTime          @default(now())
  trip               trips             @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  created_by_user    User              @relation(fields: [created_by_user_id], references: [id])
  itinerary_items    itinerary_items[]
}

model itinerary_items {
  id                 String            @id @default(cuid())
  day_id             String
  place_id           String?
  title              String
  start_time         DateTime?
  end_time           DateTime?
  note               String?
  status             ItemStatus        @default(PLANNED)
  type               ItineraryItemType
  created_by_user_id String
  created_at         DateTime          @default(now())
  day                days              @relation(fields: [day_id], references: [id], onDelete: Cascade)
  place              places?           @relation(fields: [place_id], references: [id])
  created_by_user    User              @relation(fields: [created_by_user_id], references: [id])
  trips              trips?            @relation(fields: [tripsId], references: [id])
  tripsId            String?
  locations          locations?        @relation(fields: [locationsId], references: [id])
  locationsId        String?

  @@index([day_id, start_time])
}

model expenses {
  id                 String           @id @default(cuid())
  trip_id            String
  label              String
  amount_original    Float
  currency_original  String
  fx_rate            Float
  amount_jpy         Float
  category           ExpenseCategory?
  date               DateTime
  created_by_user_id String
  created_at         DateTime         @default(now())
  trip               trips            @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  created_by_user    User             @relation(fields: [created_by_user_id], references: [id])

  @@index([trip_id, date])
}

model trip_members {
  id        String         @id @default(cuid())
  trip_id   String
  user_id   String
  role      TripMemberRole @default(VIEWER)
  joined_at DateTime       @default(now())
  trip      trips          @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([trip_id, user_id])
}

model weather_cache {
  id         String   @id @default(cuid())
  day_id     String   @unique
  fetched_at DateTime
  json       Json
  day        days     @relation(fields: [day_id], references: [id], onDelete: Cascade)
}

model checklist_items {
  id         String            @id @default(cuid())
  trip_id    String
  user_id    String
  title      String
  completed  Boolean           @default(false)
  category   ChecklistCategory
  created_at DateTime          @default(now())
  trips      trips             @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  users      User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model activities {
  id                 String     @id @default(cuid())
  trip_id            String
  title              String
  description        String?
  location_id        String?
  estimated_duration Int?
  priority           Priority   @default(MEDIUM)
  completed          Boolean    @default(false)
  created_at         DateTime   @default(now())
  locations          locations? @relation(fields: [location_id], references: [id])
  trips              trips      @relation(fields: [trip_id], references: [id], onDelete: Cascade)
}

model locations {
  id              String            @id @default(cuid())
  name            String
  address         String
  lat             Float
  lng             Float
  google_place_id String?
  custom_notes    String?
  pin_type        PinType
  trip_id         String
  activities      activities[]
  itinerary_items itinerary_items[]
  trips           trips             @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  reservations    reservations[]
}

model reservations {
  id                String          @id @default(cuid())
  trip_id           String
  type              ReservationType
  title             String
  confirmation_code String?
  date_time         DateTime
  location_id       String?
  cost              Float?
  notes             String?
  created_by        String
  created_at        DateTime        @default(now())
  users             User            @relation(fields: [created_by], references: [id])
  locations         locations?      @relation(fields: [location_id], references: [id])
  trips             trips           @relation(fields: [trip_id], references: [id], onDelete: Cascade)
}

enum ItemStatus {
  PLANNED
  DONE
}

enum ChecklistCategory {
  PACKING
  DOCUMENTS
  SHOPPING
  PREPARATION
  OTHER
}

enum ExpenseCategory {
  FOOD
  TRANSPORT
  SHOPPING
  ACTIVITIES
  ACCOMMODATION
  OTHER
}

enum ItineraryItemType {
  ACTIVITY
  TRANSPORT
  MEAL
  ACCOMMODATION
  MEETING
  FREE_TIME
}

enum PinType {
  HOTEL
  RESTAURANT
  ATTRACTION
  TRAIN_STATION
  AIRPORT
  SHOPPING
  CUSTOM
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ReservationType {
  FLIGHT
  HOTEL
  TRAIN
  RESTAURANT
  ACTIVITY
  TRANSPORT
}

enum TripMemberRole {
  OWNER
  EDITOR
  VIEWER
}

enum TripPermission {
  EDIT_ITINERARY
  MANAGE_RESERVATIONS
  MANAGE_EXPENSES
  MANAGE_ACTIVITIES
  VIEW_ONLY
}

enum UserRole {
  SUPER_USER
  COLLABORATOR
  VIEWER
}
